name: 'Administer Azure Linux VM (based upon toolset image)'

on:
  workflow_call:
    inputs:
      resourceGroupName:
        description: 'The name of an existing resource group'
        required: true
        type: string
      vmName:
        description: 'The name given to bastion VM that provides a curated toolset'
        required: true
        type: string
      suffix:
        description: 'A Virtual Network suffix.  Used for looking up the subnet where this bastion will be running and creating a network interface and public IP.'
        required: true
        type: string
      imageName:
        required: true
        type: string
        description: "the image from the shared gallery to use"
      sharedGalleryName:
        required: true
        type: string
        description: "the image from the shared gallery to use"
      imageVersion:
        required: true
        type: string
        description: "the image version from the shared gallery to use"
      sigRgName:
        required: true
        type: string
        description: "name of resource group that the gallery is in"
      action:
        required: true
        type: string
        description: Create (new) or destroy (existing)
    secrets:
      AZURE_AD_CLIENT_ID:
        required: true
      AZURE_AD_CLIENT_SECRET:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      AZURE_AD_TENANT_ID:
        required: true
      AZURE_REGION:
        required: true
      TF_BACKEND_resource_group_name:
        required: true
      TF_BACKEND_storage_account_name:
        required: true
      TF_BACKEND_storage_container_name:
        required: true
    outputs:
      bastion_vm_name:
        description: "the name of the bastion vm"
        value: ${{ jobs.terraform.outputs.bastion_vm_name }}
      b64_private_openssh_key:
        description: "the contents of private ssh key"
        value: ${{ jobs.terraform.outputs.b64_private_openssh_key }}
jobs:
  terraform:
    name: 'Terraform'
    env:
      #Azure TF connection vars
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
      TF_VAR_vm_resource_group_name: ${{ inputs.resourceGroupName }}
      TF_VAR_vm_name: ${{ inputs.vmName }}
      TF_VAR_toolset_image_version: ${{ inputs.imageVersion }}
      TF_VAR_toolset_image_name: ${{ inputs.imageName }}
      TF_VAR_sig_name: ${{ inputs.sharedGalleryName }}
      TF_VAR_suffix: ${{ inputs.suffix }}
      TF_VAR_sig_resource_group_name: ${{ inputs.sigRgName }}
    runs-on: ubuntu-latest
    environment: production
    outputs:
      bastion_vm_name: ${{ steps.set_outputs.outputs.bastion_vm_name }}
      b64_private_openssh_key: ${{ steps.set_outputs.outputs.b64_private_openssh_key }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: terraform/azure/bastion

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_wrapper: false

    - name: Generate backend configuration
      run: |
          cp ../backend/backend.tf .
          echo "resource_group_name = \"${{ secrets.TF_BACKEND_resource_group_name }}\"" > config.azurerm.tfbackend
          echo "storage_account_name = \"${{ secrets.TF_BACKEND_storage_account_name }}\"" >> config.azurerm.tfbackend
          echo "container_name = \"${{ secrets.TF_BACKEND_storage_container_name }}\"" >> config.azurerm.tfbackend
          echo "key = \"${{ inputs.resourceGroupName }}.bastion.tfstate\"" >> config.azurerm.tfbackend

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend-config=./config.azurerm.tfbackend

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      if: inputs.action != 'destroy'
      run: terraform plan

    - name: Terraform Apply
      if: inputs.action != 'destroy'
      run: terraform apply -auto-approve

    - name: Terraform Destroy
      if: inputs.action == 'destroy'
      run: terraform destroy -auto-approve

    - name: Set Outputs
      id: set_outputs
      if: inputs.action != 'destroy'
      run: |
        bastion_vm_name=$(terraform output --raw bastion_vm_name)
        echo "::set-output name=bastion_vm_name::${bastion_vm_name}"
        b64_private_openssh_key=$(terraform output --raw private_openssh_key | base64 -w 0)
        echo "::set-output name=b64_private_openssh_key::${b64_private_openssh_key}"