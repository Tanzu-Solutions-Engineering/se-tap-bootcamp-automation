name: 'Administer Azure Virtual Network'

on:
  workflow_call:
    inputs:
      resourceGroupName:
        description: 'The name of an existing resource group'
        required: true
        type: string
      virtualNetworkCidr:
        description: 'The Virtual Network CIDR block (e.g., 10.1.0.0/16)'
        required: true
        type: string
      operatorSubnetCidr:
        description: 'The Subnet CIDR block for operator resources (e.g., 10.1.0.0/24)'
        required: true
        type: string
      aksSubnetCidr:
        description: 'The Subnet CIDR block hosting AKS cluster (e.g., 10.1.1.0/24)'
        required: true
        type: string
      action:
        required: true
        type: string
        description: Create (new) or destroy (existing)
    secrets:
      AZURE_AD_CLIENT_ID:
        required: true
      AZURE_AD_CLIENT_SECRET:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      AZURE_AD_TENANT_ID:
        required: true
      AZURE_REGION:
        required: true
      TF_BACKEND_resource_group_name:
        required: true
      TF_BACKEND_storage_account_name:
        required: true
      TF_BACKEND_storage_container_name:
        required: true
    outputs:
      vnet_name:
        value: ${{ jobs.terraform.outputs.vnet_name }}
      vnet_id:
        value: ${{ jobs.terraform.outputs.vnet_id }}
      aks_subnet_name:
        value: ${{ jobs.terraform.outputs.aks_subnet_name }}
      aks_subnet_id:
        value: ${{ jobs.terraform.outputs.aks_subnet_id }}
      operator_subnet_name:
        value: ${{ jobs.terraform.outputs.operator_subnet_name }}
      operator_subnet_id:
        value: ${{ jobs.terraform.outputs.operator_subnet_id }}
      vnet_suffix:
        value: ${{ jobs.terraform.outputs.vnet_suffix }}

jobs:
  terraform:
    name: 'Terraform'
    env:
      #azure backend connection vars
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
      TF_VAR_resource_group_name: ${{ inputs.resourceGroupName }}
      TF_VAR_vnet_cidr: ${{ inputs.virtualNetworkCidr }}
      TF_VAR_operator_subnet_cidr: ${{ inputs.operatorSubnetCidr }}
      TF_VAR_aks_subnet_cidr: ${{ inputs.aksSubnetCidr }}
    runs-on: ubuntu-latest
    environment: production
    outputs:
      vnet_name: ${{ steps.set_outputs.outputs.vnet_name }}
      vnet_id: ${{ steps.set_outputs.outputs.vnet_id }}
      aks_subnet_name: ${{ steps.set_outputs.outputs.aks_subnet_name }}
      aks_subnet_id: ${{ steps.set_outputs.outputs.aks_subnet_id }}
      operator_subnet_name: ${{ steps.set_outputs.outputs.operator_subnet_name }}
      operator_subnet_id: ${{ steps.set_outputs.outputs.operator_subnet_id }}
      vnet_suffix: ${{ steps.set_outputs.outputs.vnet_suffix }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: terraform/azure/virtual-network

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_wrapper: false

    - name: Generate backend configuration
      run: |
          cp ../backend/backend.tf .
          echo "resource_group_name = \"${{ secrets.TF_BACKEND_resource_group_name }}\"" > config.azurerm.tfbackend
          echo "storage_account_name = \"${{ secrets.TF_BACKEND_storage_account_name }}\"" >> config.azurerm.tfbackend
          echo "container_name = \"${{ secrets.TF_BACKEND_storage_container_name }}\"" >> config.azurerm.tfbackend
          echo "key = \"${{ inputs.resourceGroupName }}.vnet.tfstate\"" >> config.azurerm.tfbackend

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend-config=./config.azurerm.tfbackend

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      if: inputs.action != 'destroy'
      run: terraform plan

    - name: Terraform Apply
      if: inputs.action != 'destroy'
      run: terraform apply -auto-approve

    - name: Terraform Destroy
      if: inputs.action == 'destroy'
      run: terraform destroy -auto-approve
    - name: Set Outputs
      id: set_outputs
      if: inputs.action != 'destroy'
      run: |
        vnet_name=$(terraform output --raw vnet_name)
        echo "::set-output name=vnet_name::${vnet_name}"
        vnet_id=$(terraform output --raw vnet_id)
        echo "::set-output name=vnet_id::${vnet_id}"
        aks_subnet_name=$(terraform output --raw aks_subnet_name)
        echo "::set-output name=aks_subnet_name::${aks_subnet_name}"
        aks_subnet_id=$(terraform output --raw aks_subnet_id)
        echo "::set-output name=aks_subnet_id::${aks_subnet_id}"
        operator_subnet_name=$(terraform output --raw operator_subnet_name)
        echo "::set-output name=operator_subnet_name::${operator_subnet_name}"
        operator_subnet_id=$(terraform output --raw operator_subnet_id)
        echo "::set-output name=operator_subnet_id::${operator_subnet_id}"
        vnet_suffix=$(terraform output --raw vnet_suffix)
        echo "::set-output name=vnet_suffix::${vnet_suffix}"