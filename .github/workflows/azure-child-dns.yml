name: 'Administer (Participant) Azure DNS Zone'

on:
  workflow_call:
    inputs:
      baseDomain:
        description: 'Base domain to create new zone under (e.g., tap-workshop.example.com)'
        required: true
        type: string
      domainPrefix:
        description: 'The prefix to use as the subdomain for the child zone (e.g., participant-1)'
        required: true
        type: string
      resourceGroupName:
        description: 'The resource group to create the child zone in (e.g., participant-1)'
        required: true
        type: string
      mainResourceGroup:
        description: 'The resource group that the main DNS zone was created it.'
        required: true
        type: string
      action:
        required: true
        type: string
        description: destroy or create
    secrets:
      AZURE_AD_CLIENT_ID:
        required: true
      AZURE_AD_CLIENT_SECRET:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      AZURE_AD_TENANT_ID:
        required: true
      AZURE_REGION:
        required: true
      TF_BACKEND_resource_group_name:
        required: true
      TF_BACKEND_storage_account_name:
        required: true
      TF_BACKEND_storage_container_name:
        required: true
    outputs:
      zone_subdomain:
        description: "The name of the Azure key vault"
        value: ${{ jobs.terraform.outputs.zone_subdomain }}
jobs:
  terraform:
    name: 'Terraform'
    env:
      #Azure TF connection vars
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
      #TF vars
      TF_VAR_base_domain: ${{ inputs.baseDomain }}
      TF_VAR_resource_group_name: "${{ inputs.resourceGroupName }}"
      TF_VAR_main_resource_group_name: "${{ inputs.mainResourceGroup }}"
      TF_VAR_domain_prefix: "${{ inputs.domainPrefix }}"

    runs-on: ubuntu-latest
    environment: production
    outputs:
      zone_subdomain: ${{ steps.set_outputs.outputs.zone_subdomain }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: terraform/azure/child-dns

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Generate backend configuration
      run: |
          cp ../backend/backend.tf .
          echo "resource_group_name = \"${{ secrets.TF_BACKEND_resource_group_name }}\"" > config.azurerm.tfbackend
          echo "storage_account_name = \"${{ secrets.TF_BACKEND_storage_account_name }}\"" >> config.azurerm.tfbackend
          echo "container_name = \"${{ secrets.TF_BACKEND_storage_container_name }}\"" >> config.azurerm.tfbackend
          echo "key = \"${{ inputs.resourceGroupName }}.dns.tfstate\"" >> config.azurerm.tfbackend

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend-config=./config.azurerm.tfbackend

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      if: inputs.action != 'destroy'
      run: terraform plan

    - name: Terraform Apply
      if: inputs.action != 'destroy'
      run: terraform apply -auto-approve

    - name: Terraform Destroy
      if: inputs.action == 'destroy'
      run: terraform destroy -auto-approve

    - name: Set Outputs
      id: set_outputs
      if: inputs.action != 'destroy'
      run: |
        zone_subdomain=$(terraform output zone_subdomain)
        echo "::set-output name=zone_subdomain::${zone_subdomain}"
